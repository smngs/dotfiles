lua << EOF
  -- 3. completion (hrsh7th/nvim-cmp)
  local cmp = require("cmp")
  local lspkind = require('lspkind')

  cmp.setup({
    snippet = {
      expand = function(args)
        require('luasnip').lsp_expand(args.body)
      end,
    },
    sources = {
      { name = "nvim_lsp" },
      { name = "nvim_lsp_signature_help" },
      { name = "nvim_lsp_document_symbol" },
      { name = "luasnip" },
      { name = "treesitter" },
      -- { name = "buffer" },
      { name = "path" },
    },
    mapping = cmp.mapping.preset.insert({
      ["<C-b>"] = cmp.mapping.select_prev_item(),
      ["<S-Tab>"] = cmp.mapping.select_prev_item(),
      ["<C-f>"] = cmp.mapping.select_next_item(),
      ["<Tab>"] = cmp.mapping.select_next_item(),
      ["<C-l>"] = cmp.mapping.complete(),
      ["<C-e>"] = cmp.mapping.abort(),
      ["<CR>"] = cmp.mapping.confirm { select = true },
    }),
    experimental = {
      ghost_text = true,
    },
    formatting = {
      format = lspkind.cmp_format({
        mode = 'symbol_text',
        maxwidth = 50,
        before = function(entry, vim_item)
          return vim_item
        end
      })
    }
  })
  -- cmp.setup.cmdline('/', {
  --   mapping = cmp.mapping.preset.cmdline(),
  --   sources = {
  --     { name = 'buffer' }
  --   }
  -- })
  -- cmp.setup.cmdline(":", {
  --   mapping = cmp.mapping.preset.cmdline(),
  --   sources = {
  --     { name = "path" },
  --     { name = "cmdline" },
  --   },
  -- })
EOF
