# Dein
[[plugins]]
repo = 'Shougo/dein.vim'

# Completion
[[plugins]]
repo = 'cespare/vim-toml'
[[plugins]]
repo = 'Yggdroot/indentLine'
[[plugins]]
repo = 'junegunn/fzf.vim'
[[plugins]]
repo = 'sheerun/vim-polyglot'

# LSP (Language Server Protocol)
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
    nmap <silent> gd :LspDefinition<CR>
    nmap <silent> <f2> :LspRename<CR>
    nmap <silent> <Leader>d :LspTypeDefinition<CR>
    nmap <silent> <Leader>r :LspReferences<CR>
    nmap <silent> <Leader>i :LspImplementation<CR>
    nmap <silent> <Leader>h :LspHover<CR>

    autocmd BufWritePre <buffer> LspDocumentFormatSync

    let g:lsp_diagnostics_enabled = 1
    let g:lsp_signs_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1
    let g:asyncomplete_auto_popup = 1
    let g:lsp_signs_error = {'text': '✗'}
    let g:lsp_signs_warning = {'text': '‼'}
'''
[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
depends = ['Shougo/neosnippet.vim']
hook_add='''
    call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
        \ 'name': 'neosnippet',
        \ 'whitelist': ['*'],
        \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
        \ }))
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)
'''
[[plugins]]
repo = 'mattn/vim-lsp-settings'

# ALE
# [[plugins]]
# repo = 'w0rp/ale'

# Python
[[plugins]]
repo = 'lambdalisue/vim-django-support'
[[plugins]]
repo = 'jmcantrell/vim-virtualenv'

# LaTeX
[[plugins]]
repo = 'lervag/vimtex'
hook_add = '''
    let g:vimtex_fold_envs = 0
    let g:vimtex_view_general_viewer = 'evince'
    let g:vimtex_view_general_options = '-r @line @pdf @tex'
    let g:vimtex_compiler_latexmk = {
          \ 'options' : [
          \   '-verbose',
          \   '-file-line-error',
          \   '-synctex=1',
          \   '-interaction=nonstopmode',
          \ ]}
    let g:vimtex_compiler_progname = 'nvr'
    augroup set_latex_compiler
      autocmd!
      autocmd BufNewFile,BufRead *.tex nmap <C-c> <C-c> <plug>(vimtex-compile)
    augroup END
'''

# yaml
[[plugins]]
repo = 'chase/vim-ansible-yaml'

# markdown
[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_conceal = 0
    let g:tex_conceal = 0
    let g:vim_markdown_math = 1
    let g:tex_flavor='latex'
'''

[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
    let g:previm_disable_default_css = 1
    let g:previm_custom_css_path = '~/dotfiles/.config/nvim/markdown.css'
'''
[[plugins]]
repo = 'tyru/open-browser.vim'
[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

# snippet
[[plugins]]
repo = 'Shougo/neocomplete.vim'
[[plugins]]
repo = 'Shougo/neocomplcache.vim'
[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    " snippets
    " Plugin key-mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    "imap <expr><TAB>
    " \ pumvisible() ? "\<C-n>" :
    " \ neosnippet#expandable_or_jumpable() ?
    " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    "set snippet file dir
    let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/,~/.vim/snippets'
'''
[[plugins]]
repo = 'shougo/neosnippet-snippets'
depends = ['Shougo/neosnippet.vim']
[[plugins]]
repo = 'shougo/context_filetype.vim'

# submode
[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>+')
    call submode#map('winsize', 'n', '', '-', '<C-w>-')
'''

# Appearance
[[plugins]]
repo = 'cocopon/iceberg.vim'
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = ['vim-airline/vim-airline']
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    let g:airline_theme='deus'
    let g:airline_section_warning = '%{lsp#get_buffer_diagnostics_counts()["warning"]}'
    let g:airline_section_error = '%{lsp#get_buffer_diagnostics_counts()["error"]}%{lsp#get_buffer_first_error_line()? "-".lsp#get_buffer_first_error_line():""}'
'''

# Git
[[plugins]]
repo = "airblade/vim-gitgutter"
[[plugins]]
repo = "tpope/vim-fugitive"

