# Dein
[[plugins]]
repo = 'Shougo/dein.vim'

# Completion
[[plugins]]
repo = 'cespare/vim-toml'
[[plugins]]
repo = 'Yggdroot/indentLine'
[[plugins]]
repo = 'junegunn/fzf.vim'
[[plugins]]
repo = 'sheerun/vim-polyglot'

# LSP (Language Server Protocol)
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    nmap <leader> rn <Plug>(coc-rename)

    autocmd CursorHold * silent call CocActionAsync('highlight')

    nnoremap <silent> K :call <SID>show_documentation()<CR>
        function! s:show_documentation()
        if &filetype == 'vim'
            execute 'h '.expand('<cword>')
        else
            call CocAction('doHover')
        endif
    endfunction

    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    let g:coc_global_extensions = [
        \ 'coc-clangd'
        \, 'coc-css'
        \, 'coc-eslint'
        \, 'coc-git'
        \, 'coc-html'
        \, 'coc-java'
        \, 'coc-json'
        \, 'coc-markdownlint'
        \, 'coc-python'
        \, 'coc-r-lsp'
        \, 'coc-vimtex'
        \, 'coc-yaml'
        \, 'coc-vimlsp'
        \, 'coc-snippets'
        \, 'coc-spell-checker'
        \ ]
'''

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# depends = 'context_filetype.vim'
# on_i = 1
# hook_source = '''
#     let g:deoplete#enable_at_startup = 1
#     let g:deoplete#enable_ignore_case = 1
#     let g:deoplete#enable_smart_case = 1
# 
#     " <TAB>: completion.
#     imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#mappings#manual_complete()
#     function! s:check_back_space() abort
#         let col = col('.') - 1
#         return !col || getline('.')[col - 1]  =~ '\s'
#     endfunction
# 
#     " <S-TAB>: completion back.
#     inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
# '''

# [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
# hook_add = '''
#     nmap <silent> gd :LspDefinition<CR>
#     nmap <silent> <f2> :LspRename<CR>
#     nmap <silent> <Leader>d :LspTypeDefinition<CR>
#     nmap <silent> <Leader>r :LspReferences<CR>
#     nmap <silent> <Leader>i :LspImplementation<CR>
#     nmap <silent> <Leader>h :LspHover<CR>
# 
#     autocmd BufWritePre <buffer> LspDocumentFormatSync
# 
#     let g:lsp_diagnostics_enabled = 1
#     let g:lsp_signs_enabled = 1
#     let g:lsp_diagnostics_echo_cursor = 1
#     let g:asyncomplete_auto_popup = 1
#     let g:lsp_signs_error = {'text': '✗'}
#     let g:lsp_signs_warning = {'text': '‼'}
# '''
# [[plugins]]
# repo = 'mattn/vim-lsp-settings'
# [[plugins]]
# repo = 'lighttiger2505/deoplete-vim-lsp'
# [[plugins]]
# repo = 'prabirshrestha/async.vim'

# [[plugins]]
# repo = 'prabirshrestha/asyncomplete.vim'
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-lsp.vim'
# [[plugins]]
# repo='prabirshrestha/asyncomplete-neosnippet.vim'
# depends = ['Shougo/neosnippet.vim']
# hook_add='''
#     call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
#         \ 'name': 'neosnippet',
#         \ 'whitelist': ['*'],
#         \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
#         \ }))
#     imap <C-k>     <Plug>(neosnippet_expand_or_jump)
#     smap <C-k>     <Plug>(neosnippet_expand_or_jump)
#     xmap <C-k>     <Plug>(neosnippet_expand_target)
# '''

# ALE
# [[plugins]]
# repo = 'w0rp/ale'

# Python
[[plugins]]
repo = 'lambdalisue/vim-django-support'
[[plugins]]
repo = 'jmcantrell/vim-virtualenv'

# LaTeX
[[plugins]]
repo = 'lervag/vimtex'
hook_add = '''
    let g:vimtex_fold_envs = 0
    let g:vimtex_view_general_viewer = 'evince'
    let g:vimtex_view_general_options = '-r @line @pdf @tex'
    let g:vimtex_compiler_latexmk = {
          \ 'options' : [
          \   '-verbose',
          \   '-file-line-error',
          \   '-synctex=1',
          \   '-interaction=nonstopmode',
          \ ]}
    let g:vimtex_compiler_progname = 'nvr'
    augroup set_latex_compiler
      autocmd!
      autocmd BufNewFile,BufRead *.tex nmap <C-c> <C-c> <plug>(vimtex-compile)
    augroup END
'''

# yaml
[[plugins]]
repo = 'chase/vim-ansible-yaml'

# markdown
[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_conceal = 0
    let g:tex_conceal = 0
    let g:vim_markdown_math = 1
    let g:tex_flavor='latex'
'''

[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
    let g:previm_disable_default_css = 1
    let g:previm_custom_css_path = '~/dotfiles/.config/nvim/markdown.css'
'''
[[plugins]]
repo = 'tyru/open-browser.vim'
[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

# submode
[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>+')
    call submode#map('winsize', 'n', '', '-', '<C-w>-')
'''

# Appearance
[[plugins]]
repo = 'cocopon/iceberg.vim'
[[plugins]]
repo = 'gkeep/iceberg-dark'
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = { 'colorscheme': 'icebergDark' }
'''

# Git
[[plugins]]
repo = "airblade/vim-gitgutter"
[[plugins]]
repo = "tpope/vim-fugitive"

# Terminal
[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
    nnoremap <silent><C-o> :<C-u>Deol -split=floating<CR>
    tnoremap <ESC>   <C-\><C-n>
'''
